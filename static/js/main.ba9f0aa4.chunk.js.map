{"version":3,"sources":["TableRow.js","GenerateYAML.js","ModelMembers.js","ControllerActionRow.js","ControllerMethod.js","Controller.js","ViewCount.js","App.js","index.js"],"names":["TableRow","props","updateParent","id","key","value","onToggleComplete","list","map","item","index","name","Form","Check","type","checked","model","onChange","e","target","controller","seeder","Button","variant","onClick","onRemove","GenerateYAML","React","useState","generatedCode","setGeneratedCode","textAreaRef","useRef","addTab","count","spaces","i","println","content","updateYAML","genCode","seedersText","seedersCount","controllerCount","length","tMembers","members","console","log","j","colName","dataType","options","countBelongsTo","belongsTo","countBelongsToMany","belongsToMany","countHasMany","hasMany","k","controllerText","Card","Header","href","Body","Text","Alert","FormControl","as","ref","rows","current","select","document","execCommand","focus","supportedDataTypes","initialList","ModelMembers","columnList","setColumnList","setColName","updateDataType","newList","useEffect","updateMembers","event","onAdd","concat","uuidv4","Table","striped","bordered","hover","Select","option","ix","placeholder","filter","removeColumn","AddItem","ControllerActionRow","userText","setUserText","genAction","setGenAction","updateSummary","amethod","ai","actionMethods","ControllerMethod","summary","setSummary","method","update","result","updateModelSummary","cmethod","concatString","successCounter","Object","entries","getConcatSummary","Accordion","Item","eventKey","ci","charAt","toUpperCase","slice","mi","controllerMethods","Controller","modelSummary","setModelSummary","getConcatModelSummary","defaultActiveKey","ViewCount","state","countapi","visits","then","setState","className","this","Component","migration","isComplete","App","setList","setName","handleToggleComplete","Container","Navbar","expand","bg","Brand","Label","Tabs","Tab","title","ixx","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ba9f0aa4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default function TableRow(props) {\r\n  function updateParent(id, key, value) {\r\n    props.onToggleComplete(id, key, value);\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {props.list.map((item, index) => (\r\n        <tr key={item.id}>\r\n          <td>{index + 1}</td>\r\n          <td>{item.name}</td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.model} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"model\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.controller} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"controller\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.seeder} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"seeder\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          {/* <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.migration} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"migration\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td> */}\r\n          <td>\r\n            <Button variant=\"danger\" onClick={() => props.onRemove(item.id)}>\r\n              {\"Remove \"}\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Alert, Button, Card, FormControl } from \"react-bootstrap\";\r\n\r\nexport default function GenerateYAML(props) {\r\n  const [generatedCode, setGeneratedCode] = React.useState(\"\");\r\n  const textAreaRef = useRef(null);\r\n\r\n  function downloadTxtFile() {}\r\n\r\n  function copyYAML(e) {\r\n    // e.preventDefault();\r\n    updateYAML();\r\n    // var copyText = generatedCode;\r\n    // e.clipboardData.setData(\"text/plain\", copyText);\r\n\r\n    // //console.log(\"copying \" + generatedCode);\r\n    // //navigator.clipboard.writeText(copyText);\r\n    textAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n    // This is just personal preference.\r\n    // I prefer to not show the whole text area selected.\r\n    e.target.focus();\r\n  }\r\n\r\n  function addTab(count) {\r\n    let spaces = \"\";\r\n    for (let i = 0; i < count; i++) {\r\n      spaces += \"    \";\r\n    }\r\n    return spaces;\r\n  }\r\n\r\n  function println(content) {\r\n    return content + \"\\n\";\r\n  }\r\n\r\n  function updateYAML() {\r\n    let genCode = \"\";\r\n    let seedersText = \"\";\r\n    let seedersCount = 0;\r\n    let controllerCount = 0;\r\n    if (props.list.length > 0) {\r\n      genCode = println(\"models:\");\r\n    }\r\n    for (let i = 0; i < props.list.length; i++) {\r\n      genCode += println(addTab(1) + props.list[i].name + \":\");\r\n      //add members\r\n      let tMembers = props.list[i].members;\r\n      console.log(tMembers.length);\r\n      for (let j = 0; j < tMembers.length; j++) {\r\n        genCode += println(\r\n          addTab(2) +\r\n            tMembers[j].colName +\r\n            \": \" +\r\n            tMembers[j].dataType +\r\n            \" \" +\r\n            tMembers[j].options\r\n        );\r\n      }\r\n\r\n      //add relationships\r\n      let countBelongsTo = props.list[i].belongsTo.length;\r\n      let countBelongsToMany = props.list[i].belongsToMany.length;\r\n      let countHasMany = props.list[i].hasMany.length;\r\n      if (countBelongsTo + countBelongsToMany + countHasMany > 0) {\r\n        genCode += println(addTab(2) + \"relationships:\");\r\n        genCode +=\r\n          countBelongsTo > 0\r\n            ? println(addTab(3) + \"belongsTo: \" + props.list[i].belongsTo)\r\n            : \"\";\r\n        genCode +=\r\n          countBelongsToMany > 0\r\n            ? println(\r\n                addTab(3) + \"belongsToMany: \" + props.list[i].belongsToMany\r\n              )\r\n            : \"\";\r\n        genCode +=\r\n          countHasMany > 0\r\n            ? println(addTab(3) + \"hasMany: \" + props.list[i].hasMany)\r\n            : \"\";\r\n      }\r\n\r\n      if (props.list[i].seeder !== false) {\r\n        if (seedersCount === 0) {\r\n          seedersText = props.list[i].name;\r\n        } else {\r\n          seedersText += \", \" + props.list[i].name;\r\n        }\r\n        seedersCount++;\r\n      }\r\n\r\n      if (props.list[i].controller !== false) {\r\n        controllerCount++;\r\n      }\r\n    }\r\n\r\n    if (seedersCount > 0) {\r\n      genCode += println(\"seeders: \" + seedersText);\r\n    }\r\n\r\n    if (controllerCount > 0) {\r\n      genCode += println(\"controllers:\");\r\n      for (let k = 0; k < props.list.length; k++) {\r\n        genCode += println(addTab(1) + props.list[k].name + \":\");\r\n        genCode += props.list[k].controllerText;\r\n      }\r\n    }\r\n    setGeneratedCode(genCode);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        Generated YAML File for{\" \"}\r\n        <a href=\"https://blueprint.laravelshift.com/\">Laravel Blueprint</a>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          <Alert variant=\"info\">\r\n            <b>Pro tip</b>: You can edit the below content manually, for further\r\n            customization.\r\n          </Alert>\r\n          <FormControl\r\n            as=\"textarea\"\r\n            value={generatedCode}\r\n            ref={textAreaRef}\r\n            onChange={(e) => setGeneratedCode(e.target.value)}\r\n            rows={10}\r\n          />\r\n        </Card.Text>\r\n        <Button variant=\"primary\" onClick={updateYAML}>\r\n          Generate YAML\r\n        </Button>\r\n        &nbsp;\r\n        <Button variant=\"primary\" onClick={copyYAML}>\r\n          Copy YAML\r\n        </Button>\r\n        {/* &nbsp;\r\n        <Button variant=\"primary\" onClick={downloadTxtFile}>\r\n          Download YAML\r\n        </Button> */}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Button, Card, Form, FormControl, Table } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst supportedDataTypes = [\r\n  \"Select datatype\",\r\n  \"bigIncrements\",\r\n  \"bigInteger\",\r\n  \"binary\",\r\n  \"boolean\",\r\n  \"char\",\r\n  \"dateTimeTz\",\r\n  \"dateTime\",\r\n  \"date\",\r\n  \"decimal\",\r\n  \"double\",\r\n  \"enum\",\r\n  \"float\",\r\n  \"foreignId\",\r\n  \"foreignIdFor\",\r\n  \"foreignUuid\",\r\n  \"geometryCollection\",\r\n  \"geometry\",\r\n  \"id\",\r\n  \"increments\",\r\n  \"integer\",\r\n  \"ipAddress\",\r\n  \"json\",\r\n  \"jsonb\",\r\n  \"lineString\",\r\n  \"longText\",\r\n  \"macAddress\",\r\n  \"mediumIncrements\",\r\n  \"mediumInteger\",\r\n  \"mediumText\",\r\n  \"morphs\",\r\n  \"multiLineString\",\r\n  \"multiPoint\",\r\n  \"multiPolygon\",\r\n  \"nullableMorphs\",\r\n  \"nullableTimestamps\",\r\n  \"nullableUuidMorphs\",\r\n  \"point\",\r\n  \"polygon\",\r\n  \"rememberToken\",\r\n  \"set\",\r\n  \"smallIncrements\",\r\n  \"smallInteger\",\r\n  \"softDeletesTz\",\r\n  \"softDeletes\",\r\n  \"string\",\r\n  \"string:5\",\r\n  \"string:10\",\r\n  \"string:50\",\r\n  \"string:100\",\r\n  \"string:500\",\r\n  \"text\",\r\n  \"timeTz\",\r\n  \"time\",\r\n  \"timestampTz\",\r\n  \"timestamp\",\r\n  \"timestampsTz\",\r\n  \"timestamps\",\r\n  \"tinyIncrements\",\r\n  \"tinyInteger\",\r\n  \"tinyText\",\r\n  \"unsignedBigInteger\",\r\n  \"unsignedDecimal\",\r\n  \"unsignedInteger\",\r\n  \"unsignedMediumInteger\",\r\n  \"unsignedSmallInteger\",\r\n  \"unsignedTinyInteger\",\r\n  \"uuidMorphs\",\r\n  \"uuid\",\r\n  \"year\"\r\n];\r\n\r\nconst initialList = [\r\n  {\r\n    id: \"a\",\r\n    colName: \"member1\",\r\n    dataType: \"id\",\r\n    options: \"nullable\"\r\n  },\r\n  {\r\n    id: \"b\",\r\n    colName: \"member2\",\r\n    dataType: \"integer\",\r\n    options: \"default\"\r\n  }\r\n];\r\n\r\nexport default function ModelMembers(props) {\r\n  const [columnList, setColumnList] = React.useState(initialList);\r\n  const [colName, setColName] = React.useState(\"\");\r\n\r\n  function updateParent() {\r\n    //console.log(\"updates sent to parent\");\r\n    props.updateMembers(props.id, \"members\", columnList);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    //console.log(\"Detected changes in columnList\");\r\n    updateParent();\r\n  }, [columnList]);\r\n\r\n  function handleChange(event) {\r\n    setColName(event.target.value);\r\n  }\r\n\r\n  function addColumn() {\r\n    console.log(colName);\r\n    const newList = columnList.concat({\r\n      id: uuidv4(),\r\n      colName: colName,\r\n      dataType: \"\",\r\n      options: \"\"\r\n    });\r\n\r\n    setColumnList(newList);\r\n    setColName(\"\");\r\n  }\r\n\r\n  function removeColumn(id) {\r\n    const newList = columnList.filter((item) => item.id !== id);\r\n\r\n    setColumnList(newList);\r\n  }\r\n\r\n  function updateDataType(id, key, value) {\r\n    const newList = columnList.map((item) => {\r\n      if (item.id === id) {\r\n        const updatedItem = {\r\n          ...item,\r\n          [key]: value\r\n        };\r\n\r\n        return updatedItem;\r\n      }\r\n\r\n      return item;\r\n    });\r\n\r\n    setColumnList(newList);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Header>\r\n          <b>{props.name}</b>\r\n          <AddItem\r\n            id={props.id}\r\n            name={colName}\r\n            onChange={handleChange}\r\n            onAdd={addColumn}\r\n          />\r\n        </Card.Header>\r\n        {/* {columnList.map((item, index) => (\r\n          <p>\r\n            {item.id} {item.colName} {item.dataType} {item.options}\r\n          </p>\r\n        ))} */}\r\n        <Card.Body>\r\n          {columnList.length > 0 && (\r\n            <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Column name</th>\r\n                  <th>Data type</th>\r\n                  <th>Options</th>\r\n                  <th>Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {columnList.map((item, index) => (\r\n                  <tr key={item.id}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{item.colName}</td>\r\n                    <td>\r\n                      <Form.Select\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"dataType\", e.target.value)\r\n                        }\r\n                        value={item.dataType}\r\n                      >\r\n                        {supportedDataTypes.map((option, ix) => (\r\n                          <option key={ix} value={option}>\r\n                            {option}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </td>\r\n                    <td>\r\n                      <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Add nullable default enum etc..\"\r\n                        value={item.options}\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"options\", e.target.value)\r\n                        }\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => removeColumn(item.id)}\r\n                      >\r\n                        {\"Remove \"}\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AddItem = ({ name, onChange, onAdd }) => (\r\n  <div>\r\n    <input type=\"text\" value={name} onChange={onChange} /> &nbsp;\r\n    <Button onClick={onAdd}>Add column</Button>\r\n  </div>\r\n);\r\n","import { FormControl } from \"react-bootstrap\";\r\nimport React, { useEffect } from \"react\";\r\nexport default function ControllerActionRow(props) {\r\n  const [userText, setUserText] = React.useState(\"\");\r\n  const [genAction, setGenAction] = React.useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    //console.log(\"Detected changes in columnList\");\r\n    //console.log(\"calling updatesummary\");\r\n    props.updateSummary([props.amethod], genAction);\r\n  }, [genAction]);\r\n\r\n  return (\r\n    <tr key={props.ai}>\r\n      <td key={props.ai}>{props.amethod}</td>\r\n      <td>\r\n        <FormControl\r\n          as=\"textarea\"\r\n          placeholder=\"Custom action\"\r\n          value={userText}\r\n          onChange={(e) => {\r\n            setUserText(e.target.value);\r\n            setGenAction(\r\n              e.target.value.length > 0\r\n                ? props.amethod + \": \" + e.target.value\r\n                : \"\"\r\n            );\r\n          }}\r\n        />\r\n      </td>\r\n      <td>{genAction}</td>\r\n    </tr>\r\n  );\r\n}\r\n","import { Accordion, FormControl, Table } from \"react-bootstrap\";\r\nimport React, { useEffect } from \"react\";\r\nimport ControllerActionRow from \"./ControllerActionRow\";\r\n\r\nconst actionMethods = [\r\n  \"delete\",\r\n  \"dispatch\",\r\n  \"find\",\r\n  \"fire\",\r\n  \"flash\",\r\n  \"notify\",\r\n  \"query\",\r\n  \"redirect\",\r\n  \"render\",\r\n  \"resource\",\r\n  \"respond\",\r\n  \"save\",\r\n  \"send\",\r\n  \"store\",\r\n  \"update\",\r\n  \"validate\"\r\n];\r\n\r\nexport default function ControllerMethod(props) {\r\n  const [summary, setSummary] = React.useState({});\r\n\r\n  function updateSummary(method, value) {\r\n    const update = { [method]: \"            \" + value };\r\n    const result = { ...summary, ...update };\r\n    setSummary(result);\r\n  }\r\n\r\n  function getConcatSummary() {\r\n    let concatString = \"        \" + props.cmethod + \":\\n\";\r\n    let successCounter = 0;\r\n    for (const [key, value] of Object.entries(summary)) {\r\n      console.log(value);\r\n      if (value.length > 12) {\r\n        successCounter++;\r\n        concatString += value + \"\\n\";\r\n      }\r\n    }\r\n    return successCounter == 0 ? \"\" : concatString;\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.updateModelSummary([props.cmethod], getConcatSummary());\r\n  }, [summary]);\r\n\r\n  return (\r\n    <Accordion.Item eventKey={props.ci}>\r\n      <Accordion.Header key={props.ci}>\r\n        {props.cmethod.charAt(0).toUpperCase() + props.cmethod.slice(1)} method\r\n      </Accordion.Header>\r\n      <Accordion.Body key={props.ci}>\r\n        {/* <FormControl\r\n          as=\"textarea\"\r\n          placeholder=\"Custom action\"\r\n          value={getConcatSummary()}\r\n          disabled\r\n        /> */}\r\n        <Table striped bordered hover key={props.ci}>\r\n          <thead>\r\n            <tr>\r\n              <th>Action</th>\r\n              <th>Content</th>\r\n              <th>Generated text</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {actionMethods.map((amethod, ai) => (\r\n              <ControllerActionRow\r\n                amethod={amethod}\r\n                cmethod={props.cmethod}\r\n                updateSummary={updateSummary}\r\n                ai={ai}\r\n                mi={props.ci}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Accordion, FormControl } from \"react-bootstrap\";\r\nimport ControllerMethod from \"./ControllerMethod\";\r\nconst controllerMethods = [\r\n  \"index\",\r\n  \"create\",\r\n  \"store\",\r\n  \"show\",\r\n  \"edit\",\r\n  \"update\",\r\n  \"destroy\"\r\n];\r\n\r\nexport default function Controller(props) {\r\n  const [modelSummary, setModelSummary] = React.useState({});\r\n\r\n  function updateModelSummary(method, value) {\r\n    const update = { [method]: value };\r\n    const result = { ...modelSummary, ...update };\r\n    setModelSummary(result);\r\n  }\r\n\r\n  function getConcatModelSummary() {\r\n    let concatString = \"\";\r\n    let successCounter = 0;\r\n    for (const [key, value] of Object.entries(modelSummary)) {\r\n      console.log(value);\r\n      if (value.length > 0) {\r\n        successCounter++;\r\n        concatString += value + \"\\n\";\r\n      }\r\n    }\r\n    return successCounter == 0 ? \"\" : concatString;\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.onToggleComplete(props.id, \"controllerText\", getConcatModelSummary());\r\n  }, [modelSummary]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <FormControl\r\n        as=\"textarea\"\r\n        placeholder=\"Custom action\"\r\n        value={getConcatModelSummary()}\r\n        disabled\r\n      /> */}\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {controllerMethods.map((cmethod, ci) => (\r\n          <ControllerMethod\r\n            updateModelSummary={updateModelSummary}\r\n            cmethod={cmethod}\r\n            ci={ci}\r\n          />\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","import countapi from \"countapi-js\";\r\nimport React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nexport default class ViewCount extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    countapi.visits().then((result) => {\r\n      this.setState({ count: result.value });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Alert variant=\"info\">\r\n        <div className=\"text-center\">\r\n          This page has been requested: {this.state.count} times\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <b>Sivakumar Kumar</b>\r\n        </div>\r\n        <div className=\"text-center\">Software Developer - 🇮🇳 | 🇸🇪</div>\r\n        <div className=\"text-center\">\r\n          <br />\r\n          <h6>This site uses React Bootstrap UI Framework.</h6>\r\n        </div>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Button,\n  Container,\n  Form,\n  FormControl,\n  Navbar,\n  Tab,\n  Table,\n  Tabs\n} from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport TableRow from \"./TableRow\";\nimport GenerateYAML from \"./GenerateYAML\";\nimport ModelMembers from \"./ModelMembers\";\nimport Controller from \"./Controller\";\nimport ViewCount from \"./ViewCount\";\n\nconst initialList = [\n  {\n    id: \"a\",\n    name: \"test1\",\n    model: true,\n    controller: false,\n    seeder: false,\n    migration: false,\n    isComplete: false,\n    members: [],\n    controllerText: \"\",\n    belongsTo: \"Posts\",\n    belongsToMany: \"Posts, Users\",\n    hasMany: \"Posts, Users\"\n  },\n  {\n    id: \"b\",\n    name: \"test2\",\n    model: true,\n    controller: false,\n    seeder: false,\n    migration: false,\n    isComplete: false,\n    members: [],\n    controllerText: \"\",\n    belongsTo: \"Posts\",\n    belongsToMany: \"Posts, Users\",\n    hasMany: \"Posts, Users\"\n  }\n];\n\nconst App = () => {\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState(\"\");\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleAdd() {\n    const newList = list.concat({\n      id: uuidv4(),\n      name,\n      model: true,\n      controller: true,\n      seeder: true,\n      migration: true,\n      isComplete: true,\n      members: [],\n      controllerText: \"\",\n      belongsTo: \"\",\n      belongsToMany: \"\",\n      hasMany: \"\"\n    });\n\n    setList(newList);\n\n    setName(\"\");\n  }\n\n  function handleToggleComplete(id, key, value) {\n    //console.log(value);\n    const newList = list.map((item) => {\n      if (item.id === id) {\n        const updatedItem = {\n          ...item,\n          [key]: value\n        };\n\n        return updatedItem;\n      }\n\n      return item;\n    });\n\n    setList(newList);\n  }\n\n  function handleRemove(id) {\n    const newList = list.filter((item) => item.id !== id);\n\n    setList(newList);\n  }\n\n  return (\n    <div>\n      <Container>\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n          <Container>\n            <Navbar.Brand href=\"#\">LARAFAST</Navbar.Brand>\n          </Container>\n        </Navbar>\n        <hr />\n        <Form.Label>Enter a table name (Singular)</Form.Label>\n        <AddItem name={name} onChange={handleChange} onAdd={handleAdd} />\n        {/* <List\n        list={list}\n        onToggleComplete={handleToggleComplete}\n        onRemove={handleRemove}\n      /> */}\n\n        <br />\n\n        <Tabs\n          id=\"uncontrolled-tab-example\"\n          className=\"mb-3\"\n          defaultActiveKey=\"Summary\"\n        >\n          {list.length > 0 && (\n            <Tab eventKey=\"Summary\" title=\"Summary\">\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Name</th>\n                    <th>Model</th>\n                    <th>Controller</th>\n                    <th>Seeder</th>\n                    {/* <th>Migration</th> */}\n                    <th>Delete</th>\n                  </tr>\n                </thead>\n                <TableRow\n                  list={list}\n                  onToggleComplete={handleToggleComplete}\n                  onRemove={handleRemove}\n                />\n              </Table>\n            </Tab>\n          )}\n\n          {list.map((item, ixx) => (\n            <Tab eventKey={item.name} title={item.name}>\n              <ModelMembers\n                key={ixx}\n                updateMembers={handleToggleComplete}\n                {...item}\n              />\n              <br />\n              <b>Relationships for: {item.name}</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>belongsTo</th>\n                    <th>belongsToMany</th>\n                    <th>hasMany</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      <FormControl\n                        as=\"textarea\"\n                        placeholder=\"Use comma separated list of multiple values\"\n                        value={item.belongsTo}\n                        onChange={(e) =>\n                          handleToggleComplete(\n                            item.id,\n                            \"belongsTo\",\n                            e.target.value\n                          )\n                        }\n                      />\n                    </td>\n                    <td>\n                      <FormControl\n                        as=\"textarea\"\n                        placeholder=\"Use comma separated list of multiple values\"\n                        value={item.belongsToMany}\n                        onChange={(e) =>\n                          handleToggleComplete(\n                            item.id,\n                            \"belongsToMany\",\n                            e.target.value\n                          )\n                        }\n                      />\n                    </td>\n                    <td>\n                      <FormControl\n                        as=\"textarea\"\n                        placeholder=\"Use comma separated list of multiple values\"\n                        value={item.hasMany}\n                        onChange={(e) =>\n                          handleToggleComplete(\n                            item.id,\n                            \"hasMany\",\n                            e.target.value\n                          )\n                        }\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n              <br />\n              <b>Controllers for: {item.name}</b>\n              <Controller\n                id={item.id}\n                onToggleComplete={handleToggleComplete}\n              />\n            </Tab>\n          ))}\n        </Tabs>\n        <br />\n        <GenerateYAML list={list} />\n        <ViewCount />\n      </Container>\n    </div>\n  );\n};\n\nconst AddItem = ({ name, onChange, onAdd }) => (\n  <div>\n    <input type=\"text\" value={name} onChange={onChange} /> &nbsp;\n    <Button onClick={onAdd}>Add model</Button>\n  </div>\n);\n\nconst List = ({ list, onToggleComplete, onRemove }) => (\n  <ul>\n    {list.map((item) => (\n      <li key={item.id}>\n        {item.id} {item.name} {item.isComplete + \"\"} {item.model + \"\"}{\" \"}\n        {item.controller + \"\"} {item.seeder + \"\"} {item.migration + \"\"}\n        {\n          <Button onClick={() => onToggleComplete(item.id)}>\n            {item.isComplete ? \"Undo\" : \"Done\"}\n          </Button>\n        }\n        {/* <Button onClick={() => onRemove(item.id)}>Remove</Button> */}\n      </li>\n    ))}\n  </ul>\n);\nexport default App;\n\n// {item.name} {item.isComplete + \"\"}\n//         <Button onClick={() => onToggleComplete(item.id)}>\n//           {item.isComplete ? \"Undo\" : \"Done\"}\n//         </Button>\n//         <Button onClick={() => onRemove(item.id)}>Remove</Button>\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}