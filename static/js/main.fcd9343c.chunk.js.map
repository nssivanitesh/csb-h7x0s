{"version":3,"sources":["TableRow.js","GenerateYAML.js","ModelMembers.js","ControllerActionRow.js","ControllerMethod.js","Controller.js","ViewCount.js","App.js","index.js"],"names":["controllerChoices","TableRow","props","updateParent","id","key","value","onToggleComplete","list","map","item","index","name","Form","Check","type","checked","model","onChange","e","target","Select","controller","choice","choiceIx","seeder","Button","variant","onClick","onRemove","GenerateYAML","React","useState","generatedCode","setGeneratedCode","textAreaRef","useRef","addTab","count","spaces","i","println","content","length","Card","Header","href","Body","Text","Alert","FormControl","as","ref","rows","genCode","seedersText","seedersCount","controllerCount","tMembers","members","console","log","j","colName","dataType","options","countBelongsTo","belongsTo","countBelongsToMany","belongsToMany","countHasMany","hasMany","k","controllerText","updateYAML","current","select","document","execCommand","focus","pluralize","require","supportedDataTypes","initialList","ModelMembers","columnList","setColumnList","setColName","manualCode","setManualCode","manualDataModel","setmanualDataModel","manualMigration","setmanualMigration","manualSeeder","setmanualSeeder","manualFactory","setmanualFactory","manualController","setmanualController","generateManualCode","unescape","concatStr","attrStr","len","quotedName","toLocaleLowerCase","generateModel","plural","columns","isUnique","uniqueStr","autoStr","isAuto","nullStr","isNull","generateMigration","generateFactory","updateDataType","newList","useEffect","updateMembers","event","onAdd","concat","uuidv4","Table","striped","bordered","hover","option","ix","placeholder","filter","removeColumn","label","Accordion","Item","eventKey","AddItem","class","Control","autoFocus","ControllerActionRow","userText","setUserText","genAction","setGenAction","updateSummary","amethod","ai","actionMethods","ControllerMethod","summary","setSummary","method","update","result","updateModelSummary","cmethod","concatString","successCounter","Object","entries","getConcatSummary","ci","charAt","toUpperCase","slice","mi","controllerMethods","Controller","modelSummary","setModelSummary","getConcatModelSummary","defaultActiveKey","ViewCount","state","countapi","visits","then","setState","className","this","Component","Label","App","setList","setName","handleToggleComplete","Container","Navbar","expand","bg","Brand","migration","isComplete","Tabs","Tab","title","ixx","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fcd9343c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst controllerChoices = [\"Default\", \"None\", \"Custom\"];\r\n\r\nexport default function TableRow(props) {\r\n  function updateParent(id, key, value) {\r\n    props.onToggleComplete(id, key, value);\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {props.list.map((item, index) => (\r\n        <tr key={item.id}>\r\n          <td>{index + 1}</td>\r\n          <td>{item.name}</td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.model} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"model\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          <td>\r\n            <Form.Select\r\n              value={item.controller}\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"controller\", e.target.value);\r\n                //setAddModel(e.target.checked);\r\n              }}\r\n            >\r\n              {controllerChoices.map((choice, choiceIx) => (\r\n                <option key={choiceIx} value={choice}>\r\n                  {choice}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.seeder} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"seeder\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          {/* <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.migration} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"migration\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td> */}\r\n          <td>\r\n            <Button variant=\"danger\" onClick={() => props.onRemove(item.id)}>\r\n              {\"Remove \"}\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Alert, Button, Card, FormControl } from \"react-bootstrap\";\r\n\r\nexport default function GenerateYAML(props) {\r\n  const [generatedCode, setGeneratedCode] = React.useState(\"\");\r\n  const textAreaRef = useRef(null);\r\n\r\n  function downloadTxtFile() {}\r\n\r\n  function copyYAML(e) {\r\n    // e.preventDefault();\r\n    updateYAML();\r\n    // var copyText = generatedCode;\r\n    // e.clipboardData.setData(\"text/plain\", copyText);\r\n\r\n    // //console.log(\"copying \" + generatedCode);\r\n    // //navigator.clipboard.writeText(copyText);\r\n    textAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n    // This is just personal preference.\r\n    // I prefer to not show the whole text area selected.\r\n    e.target.focus();\r\n  }\r\n\r\n  function addTab(count) {\r\n    let spaces = \"\";\r\n    for (let i = 0; i < count; i++) {\r\n      spaces += \"    \";\r\n    }\r\n    return spaces;\r\n  }\r\n\r\n  function println(content) {\r\n    return content + \"\\n\";\r\n  }\r\n\r\n  function updateYAML() {\r\n    let genCode = \"\";\r\n    let seedersText = \"\";\r\n    let seedersCount = 0;\r\n    let controllerCount = 0;\r\n    if (props.list.length > 0) {\r\n      genCode = println(\"models:\");\r\n    }\r\n    for (let i = 0; i < props.list.length; i++) {\r\n      genCode += println(addTab(1) + props.list[i].name + \":\");\r\n      //add members\r\n      let tMembers = props.list[i].members;\r\n      console.log(tMembers.length);\r\n      for (let j = 0; j < tMembers.length; j++) {\r\n        genCode += println(\r\n          addTab(2) +\r\n            tMembers[j].colName +\r\n            \": \" +\r\n            tMembers[j].dataType +\r\n            \" \" +\r\n            tMembers[j].options\r\n        );\r\n      }\r\n\r\n      //add relationships\r\n      let countBelongsTo = props.list[i].belongsTo.length;\r\n      let countBelongsToMany = props.list[i].belongsToMany.length;\r\n      let countHasMany = props.list[i].hasMany.length;\r\n      if (countBelongsTo + countBelongsToMany + countHasMany > 0) {\r\n        genCode += println(addTab(2) + \"relationships:\");\r\n        genCode +=\r\n          countBelongsTo > 0\r\n            ? println(addTab(3) + \"belongsTo: \" + props.list[i].belongsTo)\r\n            : \"\";\r\n        genCode +=\r\n          countBelongsToMany > 0\r\n            ? println(\r\n                addTab(3) + \"belongsToMany: \" + props.list[i].belongsToMany\r\n              )\r\n            : \"\";\r\n        genCode +=\r\n          countHasMany > 0\r\n            ? println(addTab(3) + \"hasMany: \" + props.list[i].hasMany)\r\n            : \"\";\r\n      }\r\n\r\n      if (props.list[i].seeder !== false) {\r\n        if (seedersCount === 0) {\r\n          seedersText = props.list[i].name;\r\n        } else {\r\n          seedersText += \", \" + props.list[i].name;\r\n        }\r\n        seedersCount++;\r\n      }\r\n\r\n      if (props.list[i].controller !== \"None\") {\r\n        controllerCount++;\r\n      }\r\n    }\r\n\r\n    if (seedersCount > 0) {\r\n      genCode += println(\"seeders: \" + seedersText);\r\n    }\r\n\r\n    if (controllerCount > 0) {\r\n      genCode += println(\"controllers:\");\r\n      for (let k = 0; k < props.list.length; k++) {\r\n        if (props.list[k].controller === \"None\") {\r\n          continue;\r\n        }\r\n        genCode += println(addTab(1) + props.list[k].name + \":\");\r\n        if (props.list[k].controller === \"Default\") {\r\n          genCode += println(addTab(2) + \"resource\");\r\n        } else {\r\n          genCode += props.list[k].controllerText;\r\n        }\r\n      }\r\n    }\r\n    setGeneratedCode(genCode);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {props.list.length > 0 && (\r\n        <Card>\r\n          <Card.Header>\r\n            Generated YAML File for{\" \"}\r\n            <a href=\"https://blueprint.laravelshift.com/\">Laravel Blueprint</a>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>\r\n              <Alert variant=\"info\">\r\n                <b>Pro tip</b>: You can edit the below content manually, for\r\n                further customization.\r\n              </Alert>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                value={generatedCode}\r\n                ref={textAreaRef}\r\n                onChange={(e) => setGeneratedCode(e.target.value)}\r\n                rows={10}\r\n              />\r\n            </Card.Text>\r\n            {/* <Button variant=\"primary\" onClick={updateYAML}>\r\n        Generate YAML\r\n      </Button>\r\n      &nbsp; */}\r\n            <Button variant=\"primary\" onClick={copyYAML}>\r\n              Generate & Copy YAML\r\n            </Button>\r\n            {/* &nbsp;\r\n      <Button variant=\"primary\" onClick={downloadTxtFile}>\r\n        Download YAML\r\n      </Button> */}\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n      {props.list.length == 0 && (\r\n        <Alert variant=\"info\">\r\n          <b>LARAFAST:</b> Not much to generate (yet)!\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Card,\r\n  Form,\r\n  FormControl,\r\n  Table\r\n} from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nvar pluralize = require(\"pluralize\");\r\n\r\nconst supportedDataTypes = [\r\n  \"Select datatype\",\r\n  \"bigIncrements\",\r\n  \"bigInteger\",\r\n  \"binary\",\r\n  \"boolean\",\r\n  \"char\",\r\n  \"dateTimeTz\",\r\n  \"dateTime\",\r\n  \"date\",\r\n  \"decimal\",\r\n  \"double\",\r\n  \"enum\",\r\n  \"float\",\r\n  \"foreignId\",\r\n  \"foreignIdFor\",\r\n  \"foreignUuid\",\r\n  \"geometryCollection\",\r\n  \"geometry\",\r\n  \"id\",\r\n  \"increments\",\r\n  \"integer\",\r\n  \"ipAddress\",\r\n  \"json\",\r\n  \"jsonb\",\r\n  \"lineString\",\r\n  \"longText\",\r\n  \"macAddress\",\r\n  \"mediumIncrements\",\r\n  \"mediumInteger\",\r\n  \"mediumText\",\r\n  \"morphs\",\r\n  \"multiLineString\",\r\n  \"multiPoint\",\r\n  \"multiPolygon\",\r\n  \"nullableMorphs\",\r\n  \"nullableTimestamps\",\r\n  \"nullableUuidMorphs\",\r\n  \"point\",\r\n  \"polygon\",\r\n  \"rememberToken\",\r\n  \"set\",\r\n  \"smallIncrements\",\r\n  \"smallInteger\",\r\n  \"softDeletesTz\",\r\n  \"softDeletes\",\r\n  \"string\",\r\n  \"string:5\",\r\n  \"string:10\",\r\n  \"string:50\",\r\n  \"string:100\",\r\n  \"string:500\",\r\n  \"text\",\r\n  \"timeTz\",\r\n  \"time\",\r\n  \"timestampTz\",\r\n  \"timestamp\",\r\n  \"timestampsTz\",\r\n  \"timestamps\",\r\n  \"tinyIncrements\",\r\n  \"tinyInteger\",\r\n  \"tinyText\",\r\n  \"unsignedBigInteger\",\r\n  \"unsignedDecimal\",\r\n  \"unsignedInteger\",\r\n  \"unsignedMediumInteger\",\r\n  \"unsignedSmallInteger\",\r\n  \"unsignedTinyInteger\",\r\n  \"uuidMorphs\",\r\n  \"uuid\",\r\n  \"year\"\r\n];\r\n\r\nconst initialList = [\r\n  // {\r\n  //   id: \"a\",\r\n  //   colName: \"member1\",\r\n  //   dataType: \"id\",\r\n  //   options: \"nullable\",\r\n  //   isUnique: false,\r\n  //   isAuto: false,\r\n  //   isNull: false\r\n  // },\r\n  // {\r\n  //   id: \"b\",\r\n  //   colName: \"member2\",\r\n  //   dataType: \"integer\",\r\n  //   options: \"default\",\r\n  //   isUnique: false,\r\n  //   isAuto: false,\r\n  //   isNull: false\r\n  // }\r\n];\r\n\r\nexport default function ModelMembers(props) {\r\n  const [columnList, setColumnList] = React.useState(initialList);\r\n  const [colName, setColName] = React.useState(\"\");\r\n  const [manualCode, setManualCode] = React.useState(false);\r\n  const [manualDataModel, setmanualDataModel] = React.useState(\"\");\r\n  const [manualMigration, setmanualMigration] = React.useState(\"\");\r\n  const [manualSeeder, setmanualSeeder] = React.useState(\"\");\r\n  const [manualFactory, setmanualFactory] = React.useState(\"\");\r\n  const [manualController, setmanualController] = React.useState(\"\");\r\n\r\n  function updateParent() {\r\n    //console.log(\"updates sent to parent\");\r\n    props.updateMembers(props.id, \"members\", columnList);\r\n  }\r\n\r\n  function generateModel() {\r\n    let concatStr = \"\";\r\n    let attrStr = \"\";\r\n    let len = columnList.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let quotedName = `'` + columnList[i].colName.toLocaleLowerCase() + `'`;\r\n      concatStr += quotedName;\r\n      attrStr += `  ` + quotedName + ` => ''`;\r\n      if (i < len - 1) {\r\n        concatStr += `,`;\r\n        attrStr += `,\r\n`;\r\n      }\r\n    }\r\n\r\n    return (\r\n      `\r\n<?php\r\n\r\nnamespace App\\\\Models;\r\n\r\nuse Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\HasFactory;\r\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\r\n\r\nclass ` +\r\n      props.name +\r\n      ` extends Model\r\n{\r\n  use HasFactory;\r\n  //\r\n}\r\n\r\n/*\r\nprotected $connection = 'sqlite';\r\nprotected $table = 'custom_table_name';\r\nprotected $primaryKey = 'custom_primary_key_id';\r\npublic $incrementing = false;\r\nprotected $keyType = 'string';\r\npublic $timestamps = false;\r\nprotected $guarded = [` +\r\n      concatStr +\r\n      `];\r\nprotected $fillable = [` +\r\n      concatStr +\r\n      `];\r\nprotected $hidden = [` +\r\n      concatStr +\r\n      `];\r\nprotected $with = [` +\r\n      concatStr +\r\n      `];\r\n\r\n//set default values to attributes\r\nprotected $attributes = [\r\n  ` +\r\n      attrStr +\r\n      `\r\n];\r\n*/\r\n`\r\n    );\r\n  }\r\n\r\n  function generateSeeder() {\r\n    let plural = pluralize(props.name);\r\n\r\n    return (\r\n      `\r\n<?php\r\n\r\nnamespace Database\\\\Seeders;\r\n\r\nuse Illuminate\\\\Database\\\\Seeder;\r\n\r\nclass ` +\r\n      props.name +\r\n      `Seeder extends Seeder\r\n{\r\n    /**\r\n     * Run the database seeds.\r\n     *\r\n     * @return void\r\n     */\r\n    public function run()\r\n    {\r\n        //\r\n    }\r\n}\r\n\r\n    `\r\n    );\r\n  }\r\n\r\n  function generateFactory() {\r\n    let concatStr = \"\";\r\n    for (let i = 0; i < columnList.length; i++) {\r\n      concatStr +=\r\n        `\r\n        '` +\r\n        columnList[i].colName.toLocaleLowerCase() +\r\n        `' => $this->faker->sentence,`;\r\n    }\r\n\r\n    return (\r\n      `\r\n<?php\r\n\r\nnamespace Database\\\\Factories;\r\n\r\nuse Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\Factory;\r\n\r\nclass ` +\r\n      props.name +\r\n      `Factory extends Factory\r\n{\r\n    /**\r\n     * Define the model's default state.\r\n     *\r\n     * @return array\r\n     */\r\n    public function definition()\r\n    {\r\n        return [\r\n            ` +\r\n      concatStr +\r\n      `\r\n        ];\r\n    }\r\n}\r\n    `\r\n    );\r\n  }\r\n\r\n  function generateMigration() {\r\n    let plural = pluralize(props.name);\r\n\r\n    let columns = \"\";\r\n    for (let i = 0; i < columnList.length; i++) {\r\n      console.log(columnList[i].isUnique);\r\n      let uniqueStr = columnList[i].isUnique === true ? `->unique()` : ``;\r\n      let autoStr = columnList[i].isAuto === true ? `->autoIncrement()` : ``;\r\n      let nullStr = columnList[i].isNull === true ? `->nullable()` : ``;\r\n\r\n      columns +=\r\n        `            $table->` +\r\n        columnList[i].dataType.toLocaleLowerCase() +\r\n        `(` +\r\n        columnList[i].colName.toLocaleLowerCase() +\r\n        `)` +\r\n        uniqueStr +\r\n        autoStr +\r\n        nullStr +\r\n        `;\r\n`;\r\n    }\r\n\r\n    return (\r\n      `\r\n<?php\r\n\r\nuse Illuminate\\\\Database\\\\Migrations\\\\Migration;\r\nuse Illuminate\\\\Database\\\\Schema\\\\Blueprint;\r\nuse Illuminate\\\\Support\\\\Facades\\\\Schema;\r\n\r\nclass Create` +\r\n      plural +\r\n      `Table extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create('` +\r\n      plural.toLocaleLowerCase() +\r\n      `', function (Blueprint $table) {\r\n            $table->id();\r\n` +\r\n      columns +\r\n      `\r\n            $table->timestamps();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists('` +\r\n      plural.toLocaleLowerCase() +\r\n      `');\r\n    }\r\n}    \r\n    `\r\n    );\r\n  }\r\n\r\n  function generateController() {\r\n    return (\r\n      `\r\n<?php\r\n\r\nnamespace App\\\\Http\\\\Controllers;\r\n\r\nuse Illuminate\\\\Http\\\\Request;\r\n\r\nclass ` +\r\n      props.name +\r\n      `Controller extends Controller\r\n{\r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function index()\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Show the form for creating a new resource.\r\n     *\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function create()\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Store a newly created resource in storage.\r\n     *\r\n     * @param  \\\\Illuminate\\\\Http\\Request  $request\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function store(Request $request)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Display the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function show($id)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Show the form for editing the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function edit($id)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Update the specified resource in storage.\r\n     *\r\n     * @param  \\\\Illuminate\\\\Http\\\\Request  $request\r\n     * @param  int  $id\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function update(Request $request, $id)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Remove the specified resource from storage.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\\\Illuminate\\\\Http\\\\Response\r\n     */\r\n    public function destroy($id)\r\n    {\r\n        //\r\n    }\r\n}\r\n`\r\n    );\r\n  }\r\n\r\n  function generateManualCode() {\r\n    setmanualDataModel(unescape(generateModel()));\r\n    setmanualMigration(unescape(generateMigration()));\r\n    setmanualSeeder(unescape(generateSeeder()));\r\n    setmanualFactory(unescape(generateFactory()));\r\n    setmanualController(unescape(generateController()));\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    //console.log(\"Detected changes in columnList\");\r\n    updateParent();\r\n    generateManualCode();\r\n  }, [columnList]);\r\n\r\n  function handleChange(event) {\r\n    setColName(event.target.value);\r\n  }\r\n\r\n  function addColumn() {\r\n    console.log(colName);\r\n    const newList = columnList.concat({\r\n      id: uuidv4(),\r\n      colName: colName,\r\n      dataType: \"\",\r\n      options: \"\",\r\n      isUnique: false,\r\n      isAuto: false,\r\n      isNull: false\r\n    });\r\n\r\n    setColumnList(newList);\r\n    setColName(\"\");\r\n  }\r\n\r\n  function removeColumn(id) {\r\n    const newList = columnList.filter((item) => item.id !== id);\r\n\r\n    setColumnList(newList);\r\n  }\r\n\r\n  function updateDataType(id, key, value) {\r\n    const newList = columnList.map((item) => {\r\n      if (item.id === id) {\r\n        const updatedItem = {\r\n          ...item,\r\n          [key]: value\r\n        };\r\n        return updatedItem;\r\n      }\r\n\r\n      return item;\r\n    });\r\n    setColumnList(newList);\r\n  }\r\n\r\n  const renderAuthButton = () => {\r\n    if (manualCode) {\r\n      return (\r\n        <Accordion>\r\n          <Accordion.Item eventKey=\"0\">\r\n            <Accordion.Header>Data model</Accordion.Header>\r\n            <Accordion.Body>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                rows={15}\r\n                value={manualDataModel}\r\n              />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n          <Accordion.Item eventKey=\"1\">\r\n            <Accordion.Header>Migration</Accordion.Header>\r\n            <Accordion.Body>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                rows={15}\r\n                value={manualMigration}\r\n              />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n          <Accordion.Item eventKey=\"2\">\r\n            <Accordion.Header>Controller</Accordion.Header>\r\n            <Accordion.Body>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                rows={15}\r\n                value={manualController}\r\n              />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n          <Accordion.Item eventKey=\"3\">\r\n            <Accordion.Header>Seeder</Accordion.Header>\r\n            <Accordion.Body>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                rows={15}\r\n                value={manualSeeder}\r\n              />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n          <Accordion.Item eventKey=\"4\">\r\n            <Accordion.Header>Factory</Accordion.Header>\r\n            <Accordion.Body>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                rows={15}\r\n                value={manualFactory}\r\n              />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        </Accordion>\r\n      );\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Header>\r\n          <b>{props.name}</b>\r\n          <AddItem\r\n            id={props.id}\r\n            name={colName}\r\n            onChange={handleChange}\r\n            onAdd={addColumn}\r\n          />\r\n        </Card.Header>\r\n        {/* {columnList.map((item, index) => (\r\n          <p>\r\n            {item.id} {item.colName} {item.dataType} {item.options}\r\n          </p>\r\n        ))} */}\r\n        <Card.Body>\r\n          {columnList.length > 0 && (\r\n            <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Column name</th>\r\n                  <th>Data type</th>\r\n                  <th>Options</th>\r\n                  <th>Unique</th>\r\n                  <th>Auto increment</th>\r\n                  <th>Nullable</th>\r\n                  <th>Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {columnList.map((item, index) => (\r\n                  <tr key={item.id}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{item.colName}</td>\r\n                    <td>\r\n                      <Form.Select\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"dataType\", e.target.value)\r\n                        }\r\n                        value={item.dataType}\r\n                      >\r\n                        {supportedDataTypes.map((option, ix) => (\r\n                          <option key={ix} value={option}>\r\n                            {option}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </td>\r\n                    <td>\r\n                      <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Add nullable default enum etc..\"\r\n                        value={item.options}\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"options\", e.target.value)\r\n                        }\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        checked={item.isUnique} // React checkbox onChange get value\r\n                        onChange={(e) => {\r\n                          updateDataType(item.id, \"isUnique\", e.target.checked);\r\n                        }} // React checkbox onChange setState\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        checked={item.isAuto} // React checkbox onChange get value\r\n                        onChange={(e) => {\r\n                          updateDataType(item.id, \"isAuto\", e.target.checked);\r\n                        }} // React checkbox onChange setState\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        checked={item.isNull} // React checkbox onChange get value\r\n                        onChange={(e) => {\r\n                          updateDataType(item.id, \"isNull\", e.target.checked);\r\n                        }} // React checkbox onChange setState\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => removeColumn(item.id)}\r\n                      >\r\n                        {\"Remove \"}\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            checked={manualCode} // React checkbox onChange get value\r\n            label={`Generate manual code as well `}\r\n            onChange={(e) => {\r\n              setManualCode(e.target.checked);\r\n              //setAddModel(e.target.checked);\r\n            }} // React checkbox onChange setState\r\n          />\r\n          {renderAuthButton()}\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AddItem = ({ name, onChange, onAdd }) => (\r\n  <div class=\"d-flex justify-content-end \">\r\n    <Form.Control\r\n      type=\"text\"\r\n      autoFocus\r\n      placeholder=\"Enter a model / table name\"\r\n      value={name}\r\n      onChange={onChange}\r\n    />\r\n    <span>&nbsp;</span>\r\n    <Button onClick={onAdd}>Add column</Button>\r\n  </div>\r\n);\r\n","import { FormControl } from \"react-bootstrap\";\r\nimport React, { useEffect } from \"react\";\r\nexport default function ControllerActionRow(props) {\r\n  const [userText, setUserText] = React.useState(\"\");\r\n  const [genAction, setGenAction] = React.useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    //console.log(\"Detected changes in columnList\");\r\n    //console.log(\"calling updatesummary\");\r\n    props.updateSummary([props.amethod], genAction);\r\n  }, [genAction]);\r\n\r\n  return (\r\n    <tr key={props.ai}>\r\n      <td key={props.ai}>{props.amethod}</td>\r\n      <td>\r\n        <FormControl\r\n          as=\"textarea\"\r\n          placeholder=\"Custom action\"\r\n          value={userText}\r\n          onChange={(e) => {\r\n            setUserText(e.target.value);\r\n            setGenAction(\r\n              e.target.value.length > 0\r\n                ? props.amethod + \": \" + e.target.value\r\n                : \"\"\r\n            );\r\n          }}\r\n        />\r\n      </td>\r\n      <td>{genAction}</td>\r\n    </tr>\r\n  );\r\n}\r\n","import { Accordion, FormControl, Table } from \"react-bootstrap\";\r\nimport React, { useEffect } from \"react\";\r\nimport ControllerActionRow from \"./ControllerActionRow\";\r\n\r\nconst actionMethods = [\r\n  \"delete\",\r\n  \"dispatch\",\r\n  \"find\",\r\n  \"fire\",\r\n  \"flash\",\r\n  \"notify\",\r\n  \"query\",\r\n  \"redirect\",\r\n  \"render\",\r\n  \"resource\",\r\n  \"respond\",\r\n  \"save\",\r\n  \"send\",\r\n  \"store\",\r\n  \"update\",\r\n  \"validate\"\r\n];\r\n\r\nexport default function ControllerMethod(props) {\r\n  const [summary, setSummary] = React.useState({});\r\n\r\n  function updateSummary(method, value) {\r\n    const update = { [method]: \"            \" + value };\r\n    const result = { ...summary, ...update };\r\n    setSummary(result);\r\n  }\r\n\r\n  function getConcatSummary() {\r\n    let concatString = \"        \" + props.cmethod + \":\\n\";\r\n    let successCounter = 0;\r\n    for (const [key, value] of Object.entries(summary)) {\r\n      console.log(value);\r\n      if (value.length > 12) {\r\n        successCounter++;\r\n        concatString += value + \"\\n\";\r\n      }\r\n    }\r\n    return successCounter == 0 ? \"\" : concatString;\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.updateModelSummary([props.cmethod], getConcatSummary());\r\n  }, [summary]);\r\n\r\n  return (\r\n    <Accordion.Item eventKey={props.ci}>\r\n      <Accordion.Header key={props.ci}>\r\n        {props.cmethod.charAt(0).toUpperCase() + props.cmethod.slice(1)} method\r\n      </Accordion.Header>\r\n      <Accordion.Body key={props.ci}>\r\n        {/* <FormControl\r\n          as=\"textarea\"\r\n          placeholder=\"Custom action\"\r\n          value={getConcatSummary()}\r\n          disabled\r\n        /> */}\r\n        <Table striped bordered hover key={props.ci}>\r\n          <thead>\r\n            <tr>\r\n              <th>Action</th>\r\n              <th>Content</th>\r\n              <th>Generated text</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {actionMethods.map((amethod, ai) => (\r\n              <ControllerActionRow\r\n                amethod={amethod}\r\n                cmethod={props.cmethod}\r\n                updateSummary={updateSummary}\r\n                ai={ai}\r\n                mi={props.ci}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Accordion, FormControl } from \"react-bootstrap\";\r\nimport ControllerMethod from \"./ControllerMethod\";\r\nconst controllerMethods = [\r\n  \"index\",\r\n  \"create\",\r\n  \"store\",\r\n  \"show\",\r\n  \"edit\",\r\n  \"update\",\r\n  \"destroy\"\r\n];\r\n\r\nexport default function Controller(props) {\r\n  const [modelSummary, setModelSummary] = React.useState({});\r\n\r\n  function updateModelSummary(method, value) {\r\n    const update = { [method]: value };\r\n    const result = { ...modelSummary, ...update };\r\n    setModelSummary(result);\r\n  }\r\n\r\n  function getConcatModelSummary() {\r\n    let concatString = \"\";\r\n    let successCounter = 0;\r\n    for (const [key, value] of Object.entries(modelSummary)) {\r\n      console.log(value);\r\n      if (value.length > 0) {\r\n        successCounter++;\r\n        concatString += value + \"\\n\";\r\n      }\r\n    }\r\n    return successCounter == 0 ? \"\" : concatString;\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.onToggleComplete(props.id, \"controllerText\", getConcatModelSummary());\r\n  }, [modelSummary]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <FormControl\r\n        as=\"textarea\"\r\n        placeholder=\"Custom action\"\r\n        value={getConcatModelSummary()}\r\n        disabled\r\n      /> */}\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {controllerMethods.map((cmethod, ci) => (\r\n          <ControllerMethod\r\n            updateModelSummary={updateModelSummary}\r\n            cmethod={cmethod}\r\n            ci={ci}\r\n          />\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","import countapi from \"countapi-js\";\r\nimport React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nexport default class ViewCount extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    countapi.visits().then((result) => {\r\n      this.setState({ count: result.value });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Alert variant=\"info\">\r\n        <div className=\"text-center\">\r\n          This page has been requested: {this.state.count} times\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <b>Sivakumar Kumar</b>\r\n        </div>\r\n        <div className=\"text-center\">Software Developer - 🇮🇳 | 🇸🇪</div>\r\n        <div className=\"text-center\">\r\n          <br />\r\n          <h6>This site uses React Bootstrap UI Framework.</h6>\r\n        </div>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Alert,\n  Button,\n  Container,\n  Form,\n  FormControl,\n  Navbar,\n  Tab,\n  Table,\n  Tabs\n} from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport TableRow from \"./TableRow\";\nimport GenerateYAML from \"./GenerateYAML\";\nimport ModelMembers from \"./ModelMembers\";\nimport Controller from \"./Controller\";\nimport ViewCount from \"./ViewCount\";\n\nconst initialList = [\n  // {\n  //   id: \"a\",\n  //   name: \"test1\",\n  //   model: true,\n  //   controller: \"Default\",\n  //   seeder: false,\n  //   migration: false,\n  //   isComplete: false,\n  //   members: [],\n  //   controllerText: \"\",\n  //   belongsTo: \"Posts\",\n  //   belongsToMany: \"Posts, Users\",\n  //   hasMany: \"Posts, Users\"\n  // },\n  // {\n  //   id: \"b\",\n  //   name: \"test2\",\n  //   model: true,\n  //   controller: \"Default\",\n  //   seeder: false,\n  //   migration: false,\n  //   isComplete: false,\n  //   members: [],\n  //   controllerText: \"\",\n  //   belongsTo: \"Posts\",\n  //   belongsToMany: \"Posts, Users\",\n  //   hasMany: \"Posts, Users\"\n  // }\n];\n\nconst App = () => {\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState(\"\");\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleAdd() {\n    const newList = list.concat({\n      id: uuidv4(),\n      name,\n      model: true,\n      controller: \"Default\",\n      seeder: true,\n      migration: true,\n      isComplete: true,\n      members: [],\n      controllerText: \"\",\n      belongsTo: \"\",\n      belongsToMany: \"\",\n      hasMany: \"\"\n    });\n\n    setList(newList);\n\n    setName(\"\");\n  }\n\n  function handleToggleComplete(id, key, value) {\n    //console.log(value);\n    const newList = list.map((item) => {\n      if (item.id === id) {\n        const updatedItem = {\n          ...item,\n          [key]: value\n        };\n\n        return updatedItem;\n      }\n\n      return item;\n    });\n\n    setList(newList);\n  }\n\n  function handleRemove(id) {\n    const newList = list.filter((item) => item.id !== id);\n\n    setList(newList);\n  }\n\n  return (\n    <div>\n      <Container>\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n          <Container>\n            <Navbar.Brand href=\"#\">\n              {\" \"}\n              LARAFAST | Laravel Blueprint YAML Creator\n            </Navbar.Brand>\n          </Container>\n        </Navbar>\n        <hr />\n        <div class=\"row row-cols-1 row-cols-lg-2 g-2 g-lg-3\">\n          <div class=\"col col-lg-3 \">\n            <div class=\"p-3 border bg-light\">\n              <AddItem name={name} onChange={handleChange} onAdd={handleAdd} />\n            </div>\n          </div>\n          <div class=\"col col-lg-9\">\n            <div class=\"p-3 border bg-light\">\n              <Tabs\n                id=\"uncontrolled-tab-example\"\n                className=\"mb-3\"\n                defaultActiveKey=\"Summary\"\n              >\n                {list.length > 0 && (\n                  <Tab eventKey=\"Summary\" title=\"Summary\">\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>#</th>\n                          <th>Name</th>\n                          <th>Model</th>\n                          <th>Controller</th>\n                          <th>Seeder</th>\n                          {/* <th>Migration</th> */}\n                          <th>Delete</th>\n                        </tr>\n                      </thead>\n                      <TableRow\n                        list={list}\n                        onToggleComplete={handleToggleComplete}\n                        onRemove={handleRemove}\n                      />\n                    </Table>\n                  </Tab>\n                )}\n\n                {list.map((item, ixx) => (\n                  <Tab eventKey={item.name} title={item.name}>\n                    <ModelMembers\n                      key={ixx}\n                      updateMembers={handleToggleComplete}\n                      {...item}\n                    />\n                    <br />\n                    <b>Relationships for: {item.name}</b>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>belongsTo</th>\n                          <th>belongsToMany</th>\n                          <th>hasMany</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>\n                            <FormControl\n                              as=\"textarea\"\n                              placeholder=\"Use comma separated list of multiple values\"\n                              value={item.belongsTo}\n                              onChange={(e) =>\n                                handleToggleComplete(\n                                  item.id,\n                                  \"belongsTo\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </td>\n                          <td>\n                            <FormControl\n                              as=\"textarea\"\n                              placeholder=\"Use comma separated list of multiple values\"\n                              value={item.belongsToMany}\n                              onChange={(e) =>\n                                handleToggleComplete(\n                                  item.id,\n                                  \"belongsToMany\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </td>\n                          <td>\n                            <FormControl\n                              as=\"textarea\"\n                              placeholder=\"Use comma separated list of multiple values\"\n                              value={item.hasMany}\n                              onChange={(e) =>\n                                handleToggleComplete(\n                                  item.id,\n                                  \"hasMany\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    {item.controller !== \"Custom\" && (\n                      <Alert variant=\"info\">\n                        <b>Info:</b> To customize controllers, from the\n                        \"Summary\" tab select \"Custom\" for Controllers from the\n                        dropdown.\n                      </Alert>\n                    )}\n                    {item.controller === \"Custom\" && (\n                      <div>\n                        <b>Controllers for: {item.name}</b>\n                        <Controller\n                          id={item.id}\n                          onToggleComplete={handleToggleComplete}\n                        />\n                        <br />\n                      </div>\n                    )}\n                  </Tab>\n                ))}\n              </Tabs>\n              <GenerateYAML list={list} />\n            </div>\n          </div>\n        </div>\n\n        {/* <List\n        list={list}\n        onToggleComplete={handleToggleComplete}\n        onRemove={handleRemove}\n      /> */}\n        <br />\n        <ViewCount />\n      </Container>\n    </div>\n  );\n};\n\nconst AddItem = ({ name, onChange, onAdd }) => (\n  <div>\n    <p>\n      <Form.Label>Model or table name (singular)</Form.Label>\n      <Form.Control\n        type=\"text\"\n        autoFocus\n        placeholder=\"Enter a model / table name\"\n        value={name}\n        onChange={onChange}\n      />\n    </p>\n    <Button onClick={onAdd}>Add</Button>\n  </div>\n);\n\nconst List = ({ list, onToggleComplete, onRemove }) => (\n  <ul>\n    {list.map((item) => (\n      <li key={item.id}>\n        {item.id} {item.name} {item.isComplete + \"\"} {item.model + \"\"}{\" \"}\n        {item.controller + \"\"} {item.seeder + \"\"} {item.migration + \"\"}\n        {\n          <Button onClick={() => onToggleComplete(item.id)}>\n            {item.isComplete ? \"Undo\" : \"Done\"}\n          </Button>\n        }\n        {/* <Button onClick={() => onRemove(item.id)}>Remove</Button> */}\n      </li>\n    ))}\n  </ul>\n);\nexport default App;\n\n// {item.name} {item.isComplete + \"\"}\n//         <Button onClick={() => onToggleComplete(item.id)}>\n//           {item.isComplete ? \"Undo\" : \"Done\"}\n//         </Button>\n//         <Button onClick={() => onRemove(item.id)}>Remove</Button>\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}