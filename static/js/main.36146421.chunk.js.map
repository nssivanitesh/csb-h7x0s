{"version":3,"sources":["TableRow.js","GenerateYAML.js","ModelMembers.js","App.js","index.js"],"names":["TableRow","props","updateParent","id","key","value","onToggleComplete","list","map","item","index","name","Form","Check","type","checked","model","onChange","e","target","controller","seeder","Button","onClick","onRemove","GenerateYAML","React","useState","generatedCode","setGeneratedCode","addTab","count","spaces","i","println","content","Card","Header","href","Body","Text","FormControl","as","rows","variant","genCode","seedersText","seedersCount","controllerCount","length","tMembers","members","console","log","j","colName","dataType","options","k","supportedDataTypes","initialList","ModelMembers","columnList","setColumnList","setColName","updateMembers","updateDataType","newList","event","onAdd","concat","uuidv4","Table","striped","bordered","hover","Select","option","ix","filter","removeColumn","AddItem","App","setList","setName","handleToggleComplete","Container","Navbar","expand","bg","Brand","Label","migration","isComplete","ixx","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.36146421.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default function TableRow(props) {\r\n  function updateParent(id, key, value) {\r\n    props.onToggleComplete(id, key, value);\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {props.list.map((item, index) => (\r\n        <tr key={item.id}>\r\n          <td>{index + 1}</td>\r\n          <td>{item.name}</td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.model} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"model\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.controller} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"controller\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.seeder} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"seeder\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td>\r\n          {/* <td>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              checked={item.migration} // React checkbox onChange get value\r\n              onChange={(e) => {\r\n                updateParent(item.id, \"migration\", e.target.checked);\r\n                //setAddModel(e.target.checked);\r\n              }} // React checkbox onChange setState\r\n            />\r\n          </td> */}\r\n          <td>\r\n            <Button onClick={() => props.onRemove(item.id)}>{\"Remove \"}</Button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Card, FormControl } from \"react-bootstrap\";\r\n\r\nexport default function GenerateYAML(props) {\r\n  const [generatedCode, setGeneratedCode] = React.useState(\"\");\r\n\r\n  function downloadTxtFile() {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([generatedCode], {\r\n      type: \"text/plain\"\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"draft.yaml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  function copyYAML() {\r\n    var copyText = generatedCode;\r\n    navigator.clipboard.writeText(copyText);\r\n  }\r\n\r\n  function addTab(count) {\r\n    let spaces = \"\";\r\n    for (let i = 0; i < count; i++) {\r\n      spaces += \"    \";\r\n    }\r\n    return spaces;\r\n  }\r\n\r\n  function println(content) {\r\n    return content + \"\\n\";\r\n  }\r\n\r\n  function updateYAML() {\r\n    let genCode = \"\";\r\n    let seedersText = \"\";\r\n    let seedersCount = 0;\r\n    let controllerCount = 0;\r\n    if (props.list.length > 0) {\r\n      genCode = println(\"models:\");\r\n    }\r\n    for (let i = 0; i < props.list.length; i++) {\r\n      genCode += println(addTab(1) + props.list[i].name + \":\");\r\n      //add members\r\n      let tMembers = props.list[i].members;\r\n      console.log(tMembers.length);\r\n      for (let j = 0; j < tMembers.length; j++) {\r\n        genCode += println(\r\n          addTab(2) +\r\n            tMembers[j].colName +\r\n            \": \" +\r\n            tMembers[j].dataType +\r\n            \" \" +\r\n            tMembers[j].options\r\n        );\r\n      }\r\n\r\n      if (props.list[i].seeder !== false) {\r\n        if (seedersCount === 0) {\r\n          seedersText = props.list[i].name;\r\n        } else {\r\n          seedersText += \", \" + props.list[i].name;\r\n        }\r\n        seedersCount++;\r\n      }\r\n\r\n      if (props.list[i].controller !== false) {\r\n        controllerCount++;\r\n      }\r\n    }\r\n\r\n    if (seedersCount > 0) {\r\n      genCode += println(\"seeders: \" + seedersText);\r\n    }\r\n\r\n    if (controllerCount > 0) {\r\n      genCode += println(\"controllers:\");\r\n      for (let k = 0; k < props.list.length; k++) {\r\n        genCode += println(addTab(1) + props.list[k].name + \":\");\r\n        genCode += println(addTab(2) + \"resource\");\r\n      }\r\n    }\r\n    setGeneratedCode(genCode);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        Generated YAML File for{\" \"}\r\n        <a href=\"https://blueprint.laravelshift.com/\">Laravel Blueprint</a>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          <FormControl\r\n            as=\"textarea\"\r\n            value={generatedCode}\r\n            onChange={(e) => setGeneratedCode(e.target.value)}\r\n            rows={10}\r\n          />\r\n        </Card.Text>\r\n        <Button variant=\"primary\" onClick={updateYAML}>\r\n          Generate YAML\r\n        </Button>\r\n        {/* &nbsp;\r\n        <Button variant=\"primary\" onClick={copyYAML}>\r\n          Copy YAML\r\n        </Button>\r\n        &nbsp;\r\n        <Button variant=\"primary\" onClick={downloadTxtFile}>\r\n          Download YAML\r\n        </Button> */}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Card, Form, FormControl, Table } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst supportedDataTypes = [\r\n  \"bigIncrements\",\r\n  \"bigInteger\",\r\n  \"binary\",\r\n  \"boolean\",\r\n  \"char\",\r\n  \"dateTimeTz\",\r\n  \"dateTime\",\r\n  \"date\",\r\n  \"decimal\",\r\n  \"double\",\r\n  \"enum\",\r\n  \"float\",\r\n  \"foreignId\",\r\n  \"foreignIdFor\",\r\n  \"foreignUuid\",\r\n  \"geometryCollection\",\r\n  \"geometry\",\r\n  \"id\",\r\n  \"increments\",\r\n  \"integer\",\r\n  \"ipAddress\",\r\n  \"json\",\r\n  \"jsonb\",\r\n  \"lineString\",\r\n  \"longText\",\r\n  \"macAddress\",\r\n  \"mediumIncrements\",\r\n  \"mediumInteger\",\r\n  \"mediumText\",\r\n  \"morphs\",\r\n  \"multiLineString\",\r\n  \"multiPoint\",\r\n  \"multiPolygon\",\r\n  \"nullableMorphs\",\r\n  \"nullableTimestamps\",\r\n  \"nullableUuidMorphs\",\r\n  \"point\",\r\n  \"polygon\",\r\n  \"rememberToken\",\r\n  \"set\",\r\n  \"smallIncrements\",\r\n  \"smallInteger\",\r\n  \"softDeletesTz\",\r\n  \"softDeletes\",\r\n  \"string\",\r\n  \"text\",\r\n  \"timeTz\",\r\n  \"time\",\r\n  \"timestampTz\",\r\n  \"timestamp\",\r\n  \"timestampsTz\",\r\n  \"timestamps\",\r\n  \"tinyIncrements\",\r\n  \"tinyInteger\",\r\n  \"tinyText\",\r\n  \"unsignedBigInteger\",\r\n  \"unsignedDecimal\",\r\n  \"unsignedInteger\",\r\n  \"unsignedMediumInteger\",\r\n  \"unsignedSmallInteger\",\r\n  \"unsignedTinyInteger\",\r\n  \"uuidMorphs\",\r\n  \"uuid\",\r\n  \"year\"\r\n];\r\n\r\nconst initialList = [\r\n  // {\r\n  //   id: \"a\",\r\n  //   colName: \"member1\",\r\n  //   dataType: \"id\",\r\n  //   options: \"nullable\"\r\n  // },\r\n  // {\r\n  //   id: \"b\",\r\n  //   colName: \"member2\",\r\n  //   dataType: \"integer\",\r\n  //   options: \"default\"\r\n  // }\r\n];\r\n\r\nexport default function ModelMembers(props) {\r\n  const [columnList, setColumnList] = React.useState(initialList);\r\n  const [colName, setColName] = React.useState(\"\");\r\n\r\n  function updateParent() {\r\n    console.log(\"updates sent to parent\");\r\n    props.updateMembers(props.id, \"members\", columnList);\r\n  }\r\n\r\n  function handleChange(event) {\r\n    setColName(event.target.value);\r\n    updateParent();\r\n  }\r\n\r\n  function addColumn() {\r\n    console.log(colName);\r\n    const newList = columnList.concat({\r\n      id: uuidv4(),\r\n      colName: colName,\r\n      dataType: \"\",\r\n      options: \"\"\r\n    });\r\n\r\n    setColumnList(newList);\r\n    setColName(\"\");\r\n    updateParent();\r\n  }\r\n\r\n  function removeColumn(id) {\r\n    const newList = columnList.filter((item) => item.id !== id);\r\n\r\n    setColumnList(newList);\r\n    updateParent();\r\n  }\r\n\r\n  function updateDataType(id, key, value) {\r\n    const newList = columnList.map((item) => {\r\n      if (item.id === id) {\r\n        const updatedItem = {\r\n          ...item,\r\n          [key]: value\r\n        };\r\n\r\n        return updatedItem;\r\n      }\r\n\r\n      return item;\r\n    });\r\n\r\n    setColumnList(newList);\r\n    updateParent();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Header>\r\n          <b>{props.name}</b>\r\n          <AddItem\r\n            id={props.id}\r\n            name={colName}\r\n            onChange={handleChange}\r\n            onAdd={addColumn}\r\n          />\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {columnList.length > 0 && (\r\n            <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Column name</th>\r\n                  <th>Data type</th>\r\n                  <th>Options</th>\r\n                  <th>Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {columnList.map((item, index) => (\r\n                  <tr key={item.id}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{item.colName}</td>\r\n                    <td>\r\n                      <Form.Select\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"dataType\", e.target.value)\r\n                        }\r\n                        value={item.dataType}\r\n                      >\r\n                        {supportedDataTypes.map((option, ix) => (\r\n                          <option key={ix} value={option}>\r\n                            {option}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </td>\r\n                    <td>\r\n                      <FormControl\r\n                        as=\"textarea\"\r\n                        value={item.options}\r\n                        onChange={(e) =>\r\n                          updateDataType(item.id, \"options\", e.target.value)\r\n                        }\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <Button onClick={() => removeColumn(item.id)}>\r\n                        {\"Remove \"}\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AddItem = ({ name, onChange, onAdd }) => (\r\n  <div>\r\n    <input type=\"text\" value={name} onChange={onChange} /> &nbsp;\r\n    <Button onClick={onAdd}>Add column</Button>\r\n  </div>\r\n);\r\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Button, Container, Form, Navbar, Table } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport TableRow from \"./TableRow\";\nimport GenerateYAML from \"./GenerateYAML\";\nimport ModelMembers from \"./ModelMembers\";\n\nconst initialList = [\n  // {\n  //   id: \"a\",\n  //   name: \"test1\",\n  //   model: true,\n  //   controller: false,\n  //   seeder: false,\n  //   migration: false,\n  //   isComplete: false,\n  //   members: []\n  // },\n  // {\n  //   id: \"b\",\n  //   name: \"test2\",\n  //   model: true,\n  //   controller: false,\n  //   seeder: false,\n  //   migration: false,\n  //   isComplete: false,\n  //   members: []\n  // }\n];\n\nconst App = () => {\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState(\"\");\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleAdd() {\n    const newList = list.concat({\n      id: uuidv4(),\n      name,\n      model: true,\n      controller: true,\n      seeder: true,\n      migration: true,\n      isComplete: true,\n      members: []\n    });\n\n    setList(newList);\n\n    setName(\"\");\n  }\n\n  function handleToggleComplete(id, key, value) {\n    const newList = list.map((item) => {\n      if (item.id === id) {\n        const updatedItem = {\n          ...item,\n          [key]: value\n        };\n\n        return updatedItem;\n      }\n\n      return item;\n    });\n\n    setList(newList);\n  }\n\n  function handleRemove(id) {\n    const newList = list.filter((item) => item.id !== id);\n\n    setList(newList);\n  }\n\n  return (\n    <div>\n      <Container>\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n          <Container>\n            <Navbar.Brand href=\"#\">LARAFAST</Navbar.Brand>\n          </Container>\n        </Navbar>\n        <hr />\n        <Form.Label>Enter a table name</Form.Label>\n        <AddItem name={name} onChange={handleChange} onAdd={handleAdd} />\n        <hr />\n        {/* <List\n        list={list}\n        onToggleComplete={handleToggleComplete}\n        onRemove={handleRemove}\n      /> */}\n        {list.length > 0 && (\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Name</th>\n                <th>Model</th>\n                <th>Controller</th>\n                <th>Seeder</th>\n                {/* <th>Migration</th> */}\n                <th>Delete</th>\n              </tr>\n            </thead>\n            <TableRow\n              list={list}\n              onToggleComplete={handleToggleComplete}\n              onRemove={handleRemove}\n            />\n          </Table>\n        )}\n        {list.map((item, ixx) => (\n          <ModelMembers\n            key={ixx}\n            updateMembers={handleToggleComplete}\n            {...item}\n          />\n        ))}\n        <hr />\n        <GenerateYAML list={list} />\n      </Container>\n    </div>\n  );\n};\n\nconst AddItem = ({ name, onChange, onAdd }) => (\n  <div>\n    <input type=\"text\" value={name} onChange={onChange} /> &nbsp;\n    <Button onClick={onAdd}>Add model</Button>\n  </div>\n);\n\nconst List = ({ list, onToggleComplete, onRemove }) => (\n  <ul>\n    {list.map((item) => (\n      <li key={item.id}>\n        {item.id} {item.name} {item.isComplete + \"\"} {item.model + \"\"}{\" \"}\n        {item.controller + \"\"} {item.seeder + \"\"} {item.migration + \"\"}\n        {\n          <Button onClick={() => onToggleComplete(item.id)}>\n            {item.isComplete ? \"Undo\" : \"Done\"}\n          </Button>\n        }\n        {/* <Button onClick={() => onRemove(item.id)}>Remove</Button> */}\n      </li>\n    ))}\n  </ul>\n);\nexport default App;\n\n// {item.name} {item.isComplete + \"\"}\n//         <Button onClick={() => onToggleComplete(item.id)}>\n//           {item.isComplete ? \"Undo\" : \"Done\"}\n//         </Button>\n//         <Button onClick={() => onRemove(item.id)}>Remove</Button>\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}